// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: school/v1/school.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	School_TaskUserList_FullMethodName   = "/api.school.v1.School/TaskUserList"
	School_TaskManageList_FullMethodName = "/api.school.v1.School/TaskManageList"
	School_TaskCreate_FullMethodName     = "/api.school.v1.School/TaskCreate"
	School_TaskDelete_FullMethodName     = "/api.school.v1.School/TaskDelete"
	School_TaskModify_FullMethodName     = "/api.school.v1.School/TaskModify"
	School_TaskStatusSet_FullMethodName  = "/api.school.v1.School/TaskStatusSet"
)

// SchoolClient is the client API for School service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolClient interface {
	// 用户获取任务列表
	TaskUserList(ctx context.Context, in *TaskUserListReq, opts ...grpc.CallOption) (*TaskUserListReply, error)
	// 管理员获取任务列表
	TaskManageList(ctx context.Context, in *TaskManageListReq, opts ...grpc.CallOption) (*TaskManageListReply, error)
	// 管理员创建任务
	TaskCreate(ctx context.Context, in *TaskCreateReq, opts ...grpc.CallOption) (*TaskCreateReply, error)
	// 管理员删除任务
	TaskDelete(ctx context.Context, in *TaskDeleteReq, opts ...grpc.CallOption) (*TaskDeleteReply, error)
	// 管理员修改任务
	TaskModify(ctx context.Context, in *TaskModifyReq, opts ...grpc.CallOption) (*TaskModifyReply, error)
	// 管理员修改任务启用状态
	TaskStatusSet(ctx context.Context, in *TaskStatusSetReq, opts ...grpc.CallOption) (*TaskStatusSetReply, error)
}

type schoolClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolClient(cc grpc.ClientConnInterface) SchoolClient {
	return &schoolClient{cc}
}

func (c *schoolClient) TaskUserList(ctx context.Context, in *TaskUserListReq, opts ...grpc.CallOption) (*TaskUserListReply, error) {
	out := new(TaskUserListReply)
	err := c.cc.Invoke(ctx, School_TaskUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) TaskManageList(ctx context.Context, in *TaskManageListReq, opts ...grpc.CallOption) (*TaskManageListReply, error) {
	out := new(TaskManageListReply)
	err := c.cc.Invoke(ctx, School_TaskManageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) TaskCreate(ctx context.Context, in *TaskCreateReq, opts ...grpc.CallOption) (*TaskCreateReply, error) {
	out := new(TaskCreateReply)
	err := c.cc.Invoke(ctx, School_TaskCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) TaskDelete(ctx context.Context, in *TaskDeleteReq, opts ...grpc.CallOption) (*TaskDeleteReply, error) {
	out := new(TaskDeleteReply)
	err := c.cc.Invoke(ctx, School_TaskDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) TaskModify(ctx context.Context, in *TaskModifyReq, opts ...grpc.CallOption) (*TaskModifyReply, error) {
	out := new(TaskModifyReply)
	err := c.cc.Invoke(ctx, School_TaskModify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) TaskStatusSet(ctx context.Context, in *TaskStatusSetReq, opts ...grpc.CallOption) (*TaskStatusSetReply, error) {
	out := new(TaskStatusSetReply)
	err := c.cc.Invoke(ctx, School_TaskStatusSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServer is the server API for School service.
// All implementations must embed UnimplementedSchoolServer
// for forward compatibility
type SchoolServer interface {
	// 用户获取任务列表
	TaskUserList(context.Context, *TaskUserListReq) (*TaskUserListReply, error)
	// 管理员获取任务列表
	TaskManageList(context.Context, *TaskManageListReq) (*TaskManageListReply, error)
	// 管理员创建任务
	TaskCreate(context.Context, *TaskCreateReq) (*TaskCreateReply, error)
	// 管理员删除任务
	TaskDelete(context.Context, *TaskDeleteReq) (*TaskDeleteReply, error)
	// 管理员修改任务
	TaskModify(context.Context, *TaskModifyReq) (*TaskModifyReply, error)
	// 管理员修改任务启用状态
	TaskStatusSet(context.Context, *TaskStatusSetReq) (*TaskStatusSetReply, error)
	mustEmbedUnimplementedSchoolServer()
}

// UnimplementedSchoolServer must be embedded to have forward compatible implementations.
type UnimplementedSchoolServer struct {
}

func (UnimplementedSchoolServer) TaskUserList(context.Context, *TaskUserListReq) (*TaskUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskUserList not implemented")
}
func (UnimplementedSchoolServer) TaskManageList(context.Context, *TaskManageListReq) (*TaskManageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskManageList not implemented")
}
func (UnimplementedSchoolServer) TaskCreate(context.Context, *TaskCreateReq) (*TaskCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreate not implemented")
}
func (UnimplementedSchoolServer) TaskDelete(context.Context, *TaskDeleteReq) (*TaskDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDelete not implemented")
}
func (UnimplementedSchoolServer) TaskModify(context.Context, *TaskModifyReq) (*TaskModifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskModify not implemented")
}
func (UnimplementedSchoolServer) TaskStatusSet(context.Context, *TaskStatusSetReq) (*TaskStatusSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStatusSet not implemented")
}
func (UnimplementedSchoolServer) mustEmbedUnimplementedSchoolServer() {}

// UnsafeSchoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServer will
// result in compilation errors.
type UnsafeSchoolServer interface {
	mustEmbedUnimplementedSchoolServer()
}

func RegisterSchoolServer(s grpc.ServiceRegistrar, srv SchoolServer) {
	s.RegisterService(&School_ServiceDesc, srv)
}

func _School_TaskUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).TaskUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_TaskUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).TaskUserList(ctx, req.(*TaskUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_TaskManageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskManageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).TaskManageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_TaskManageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).TaskManageList(ctx, req.(*TaskManageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_TaskCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).TaskCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_TaskCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).TaskCreate(ctx, req.(*TaskCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_TaskDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).TaskDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_TaskDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).TaskDelete(ctx, req.(*TaskDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_TaskModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).TaskModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_TaskModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).TaskModify(ctx, req.(*TaskModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_TaskStatusSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).TaskStatusSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_TaskStatusSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).TaskStatusSet(ctx, req.(*TaskStatusSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// School_ServiceDesc is the grpc.ServiceDesc for School service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var School_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.school.v1.School",
	HandlerType: (*SchoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskUserList",
			Handler:    _School_TaskUserList_Handler,
		},
		{
			MethodName: "TaskManageList",
			Handler:    _School_TaskManageList_Handler,
		},
		{
			MethodName: "TaskCreate",
			Handler:    _School_TaskCreate_Handler,
		},
		{
			MethodName: "TaskDelete",
			Handler:    _School_TaskDelete_Handler,
		},
		{
			MethodName: "TaskModify",
			Handler:    _School_TaskModify_Handler,
		},
		{
			MethodName: "TaskStatusSet",
			Handler:    _School_TaskStatusSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school/v1/school.proto",
}
