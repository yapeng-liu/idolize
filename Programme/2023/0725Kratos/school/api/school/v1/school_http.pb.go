// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.4
// source: school/v1/school.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSchoolTaskCreate = "/api.school.v1.School/TaskCreate"
const OperationSchoolTaskDelete = "/api.school.v1.School/TaskDelete"
const OperationSchoolTaskManageList = "/api.school.v1.School/TaskManageList"
const OperationSchoolTaskModify = "/api.school.v1.School/TaskModify"
const OperationSchoolTaskStatusSet = "/api.school.v1.School/TaskStatusSet"
const OperationSchoolTaskUserList = "/api.school.v1.School/TaskUserList"

type SchoolHTTPServer interface {
	// TaskCreate 管理员创建任务
	TaskCreate(context.Context, *TaskCreateReq) (*TaskCreateReply, error)
	// TaskDelete管理员删除任务
	TaskDelete(context.Context, *TaskDeleteReq) (*TaskDeleteReply, error)
	// TaskManageList 管理员获取任务列表
	TaskManageList(context.Context, *TaskManageListReq) (*TaskManageListReply, error)
	// TaskModify管理员修改任务
	TaskModify(context.Context, *TaskModifyReq) (*TaskModifyReply, error)
	// TaskStatusSet管理员修改任务启用状态
	TaskStatusSet(context.Context, *TaskStatusSetReq) (*TaskStatusSetReply, error)
	// TaskUserList 用户获取任务列表
	TaskUserList(context.Context, *TaskUserListReq) (*TaskUserListReply, error)
}

func RegisterSchoolHTTPServer(s *http.Server, srv SchoolHTTPServer) {
	r := s.Route("/")
	r.GET("/circle/v1/circle/task_list", _School_TaskUserList0_HTTP_Handler(srv))
	r.GET("/circle/v1/circle/task_manage", _School_TaskManageList0_HTTP_Handler(srv))
	r.POST("/circle/v1/circle/task_create", _School_TaskCreate0_HTTP_Handler(srv))
	r.DELETE("/circle/v1/circle/task_delete", _School_TaskDelete0_HTTP_Handler(srv))
	r.PUT("/circle/v1/circle/task_modify", _School_TaskModify0_HTTP_Handler(srv))
	r.PUT("/circle/v1/circle/task_status_set", _School_TaskStatusSet0_HTTP_Handler(srv))
}

func _School_TaskUserList0_HTTP_Handler(srv SchoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskUserListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolTaskUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskUserList(ctx, req.(*TaskUserListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskUserListReply)
		return ctx.Result(200, reply)
	}
}

func _School_TaskManageList0_HTTP_Handler(srv SchoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskManageListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolTaskManageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskManageList(ctx, req.(*TaskManageListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskManageListReply)
		return ctx.Result(200, reply)
	}
}

func _School_TaskCreate0_HTTP_Handler(srv SchoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolTaskCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskCreate(ctx, req.(*TaskCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskCreateReply)
		return ctx.Result(200, reply)
	}
}

func _School_TaskDelete0_HTTP_Handler(srv SchoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolTaskDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskDelete(ctx, req.(*TaskDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _School_TaskModify0_HTTP_Handler(srv SchoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskModifyReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolTaskModify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskModify(ctx, req.(*TaskModifyReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskModifyReply)
		return ctx.Result(200, reply)
	}
}

func _School_TaskStatusSet0_HTTP_Handler(srv SchoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskStatusSetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolTaskStatusSet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskStatusSet(ctx, req.(*TaskStatusSetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskStatusSetReply)
		return ctx.Result(200, reply)
	}
}

type SchoolHTTPClient interface {
	TaskCreate(ctx context.Context, req *TaskCreateReq, opts ...http.CallOption) (rsp *TaskCreateReply, err error)
	TaskDelete(ctx context.Context, req *TaskDeleteReq, opts ...http.CallOption) (rsp *TaskDeleteReply, err error)
	TaskManageList(ctx context.Context, req *TaskManageListReq, opts ...http.CallOption) (rsp *TaskManageListReply, err error)
	TaskModify(ctx context.Context, req *TaskModifyReq, opts ...http.CallOption) (rsp *TaskModifyReply, err error)
	TaskStatusSet(ctx context.Context, req *TaskStatusSetReq, opts ...http.CallOption) (rsp *TaskStatusSetReply, err error)
	TaskUserList(ctx context.Context, req *TaskUserListReq, opts ...http.CallOption) (rsp *TaskUserListReply, err error)
}

type SchoolHTTPClientImpl struct {
	cc *http.Client
}

func NewSchoolHTTPClient(client *http.Client) SchoolHTTPClient {
	return &SchoolHTTPClientImpl{client}
}

func (c *SchoolHTTPClientImpl) TaskCreate(ctx context.Context, in *TaskCreateReq, opts ...http.CallOption) (*TaskCreateReply, error) {
	var out TaskCreateReply
	pattern := "/circle/v1/circle/task_create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSchoolTaskCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SchoolHTTPClientImpl) TaskDelete(ctx context.Context, in *TaskDeleteReq, opts ...http.CallOption) (*TaskDeleteReply, error) {
	var out TaskDeleteReply
	pattern := "/circle/v1/circle/task_delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSchoolTaskDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SchoolHTTPClientImpl) TaskManageList(ctx context.Context, in *TaskManageListReq, opts ...http.CallOption) (*TaskManageListReply, error) {
	var out TaskManageListReply
	pattern := "/circle/v1/circle/task_manage"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSchoolTaskManageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SchoolHTTPClientImpl) TaskModify(ctx context.Context, in *TaskModifyReq, opts ...http.CallOption) (*TaskModifyReply, error) {
	var out TaskModifyReply
	pattern := "/circle/v1/circle/task_modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSchoolTaskModify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SchoolHTTPClientImpl) TaskStatusSet(ctx context.Context, in *TaskStatusSetReq, opts ...http.CallOption) (*TaskStatusSetReply, error) {
	var out TaskStatusSetReply
	pattern := "/circle/v1/circle/task_status_set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSchoolTaskStatusSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SchoolHTTPClientImpl) TaskUserList(ctx context.Context, in *TaskUserListReq, opts ...http.CallOption) (*TaskUserListReply, error) {
	var out TaskUserListReply
	pattern := "/circle/v1/circle/task_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSchoolTaskUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
